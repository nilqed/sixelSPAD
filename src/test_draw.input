-- Tests for modified view2D/3D.spad and new drawfe.spad package
-- Compilation (watch order)

)co drawfe
)co view2D+
)co view3D+
)co draw+


-- Setting/getting frontends

fe2D:=getFrontend2D()
fe2D.'type:="gnuplot"
fe2D.'output:="data2d.gpl"
fe2D.'display:="sixel"

fe3D:=getFrontend3D()
fe3D.'type:="gnuplot"
fe3D.'output:="data3d.gpl"
fe3D.'display:="sixel"

setFrontend2D(fe2D)
setFrontend3D(fe3D)

getFrontend2D()
getFrontend3D()

-- Examples 2d

DF ==> DoubleFloat

draw(x^2*sin(x),x=-2..2)
draw(curve(sin(t),t*cos(t)),t=-%pi..%pi)
draw([i::DF for i in 1..10],[sqrt(i)::DF for i in 1..10])

-- from book 7.1.1 ff.
draw(sin(tan(x)) - tan(sin(x)),x = 0..6)
f(x) == (x-1)*(x-2)*(x-3) 
draw(f, 0..4) 

draw(curve(sin(t)*sin(2*t)*sin(3*t),sin(4*t)*sin(5*t)*sin(6*t)),t=0..2*%pi)
draw(curve(cos(t), sin(t)), t = 0..2*%pi) 

f(t:DFLOAT):DFLOAT == sin(3*t/4) 
g(t:DFLOAT):DFLOAT == sin(t) 

draw(curve(f,g),0..%pi) 
draw(curve(f,g),-4*%pi..4*%pi) 


-- 7.1.3 Plotting Plane Algebraic Curves

p := ((x^2 + y^2 + 1) - 8*x)^2 - (8*(x^2 + y^2 + 1)-4*x-1) 
  
draw(p = 0, x, y, range == [-1..11, -7..7]) 
draw(sin(1/x),x=-2*%pi..2*%pi, adaptive == false) 
draw(tan(x),x=-2*%pi..2*%pi, clip == true) 
draw(sin(x),x=-%pi..%pi, toScale == true, unit == [1.0,1.0])
draw(sec(x),x=-2*%pi..2*%pi, clip == [-2*%pi..2*%pi,-%pi..%pi], unit == [1.0,1.0]) 
draw(sin(x),x=-%pi..%pi, curveColor == bright red())
draw(sin(x),x=-%pi..%pi, pointColor == pastel yellow()) 
draw(curve(9*sin(3*t/4),8*sin(t)), t = -4*%pi..4*%pi, unit == [2.0,1.0])
draw(y^2 + y - (x^3 - x) = 0, x, y, range == [-2..2,-2..1], unit==[1.0,1.0])
draw(curve(sin(5*t),t),t=0..2*%pi, coordinates == polar)


-- 7.2 Three-Dimensional Graphics
                                      
draw(cos(x*y),x=-3..3,y=-3..3)

h(x,y) == sin(x)*cos(y) 
draw(h,-%pi..%pi,-%pi..%pi) 

draw(surface(u*cos(v), u*sin(v), v*cos(u)), u=-4..4, v=0..%pi, coordinates== parabolicCylindrical)
 
n1(u:DFLOAT,v:DFLOAT):DFLOAT == u*cos(v) 
n2(u:DFLOAT,v:DFLOAT):DFLOAT == u*sin(v) 
n3(u:DFLOAT,v:DFLOAT):DFLOAT == u 

draw(surface(n1,n2,n3), 1..4, 1..2*%pi, coordinates == toroidal(1$DFLOAT)) 


-- 7.2.4 Three-Dimensional Options
draw(cos(x*y),x=0..2*%pi,y=0..%pi,title == "Title of Graph") 

draw(cos(x*y),x=-3..3,y=-3..3, style=="smooth", title=="Smooth Option")
draw(cos(x*y),x=-3..3,y=-3..3, style=="with pm3d", title=="pm3d option")
draw(cos(x*y),x=-3..3,y=-3..3, title=="default Option")

m(u:DFLOAT,v:DFLOAT):DFLOAT == 1 
draw(m, 0..2*%pi,0..%pi, coordinates == spherical, style=="shade") 
draw(m, 0..2*%pi,0..%pi, coordinates == spherical, style=="")
draw(m, 0..2*%pi,0..%pi, coordinates == spherical) 

-- 7.2.2 Plotting Three-Dimensional Parametric Space Curves
draw(curve(5*cos(t), 5*sin(t),t), t=-12..12) 



-- Options 2D
draw(x^2*sin(x),x=-2..2,style=="lc 'blue' lw 1 with lines")
draw(besselJ(5,x),x=-2..2,style=="lc 'green' lw 1 with lines")
draw(besselI(2,x),x=-2..2,title=="Bessel I",style=="lc 'magenta' lw 1 with lines")
draw(besselI(2,x),x=-2..2,style=="lc 'white' lw 1 with points")

-- Graph
v:=draw(x,x=0..1)
gr:=getGraph(v,1)
--pl:=pointLists gr


fe3D.'display:="postscript; set output 'test.ps'"
setFrontend3D(fe3D)
draw(surface(n1,n2,n3), 1..4, 1..2*%pi, coordinates == toroidal(1$DFLOAT)) 

fe3D.'display:="postscript; set output 'test2.ps'"
setFrontend3D(fe3D)
draw(m, 0..2*%pi,0..%pi, coordinates == spherical) 

fe3D.'display:="svg background 'black'; set output 'test.svg'"
setFrontend3D(fe3D)
draw(curve(5*cos(t), 5*sin(t),t), t=-12..12) 

fe3D.'display:="svg background 'blue'; set output 'test2.svg'"
setFrontend3D(fe3D)
draw(m, 0..2*%pi,0..%pi, coordinates == spherical) 





